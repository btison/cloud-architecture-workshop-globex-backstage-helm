# -- Upstream Backstage [chart configuration](https://github.com/backstage/charts/blob/main/charts/backstage/values.yaml)
# @default -- Use Openshift compatible settings
# -- String to partially override common.names.fullname
nameOverride: ""

# -- String to fully override common.names.fullname
fullnameOverride: ""

# -- Default Kubernetes cluster domain
clusterDomain: cluster.local

# -- Labels to add to all deployed objects
commonLabels: {}

# -- Annotations to add to all deployed objects
commonAnnotations: {}

# -- Array of extra objects to deploy with the release
extraDeploy: []

# -- Enable diagnostic mode in the Deployment
diagnosticMode:

  # -- Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  enabled: false

  # -- Command to override all containers in the Deployment
  command:
    - sleep

  # -- Args to override all containers in the Deployment
  args:
    - infinity




backstage:
  replicas: 1
  image:
    registry: quay.io
    #repository: janus-idp/redhat-backstage-build
    repository: cloud-architecture-workshop/backstage
    #repository: ablock/backstage-oauth
    tag: latest
    debug: true
  
  # -- Container ports on the Deployment
  containerPorts:
    backend: 7007

  # -- Backstage container command
  command: ["node", "packages/backend"]

  # -- Backstage container command arguments
  args: []

  # -- Extra app configuration files to inline into command arguments
  extraAppConfig: []

  ## Deployment sidecars
  extraContainers:
    - name: oauth2-proxy
      env:
        - name: OAUTH2_PROXY_CLIENT_ID
          value: '{{ required "Keycloak Client Secret is Required" .Values.global.keycloak.clientId }}'
        - name: OAUTH2_PROXY_CLIENT_SECRET
          value: '{{ required "Keycloak Client Secret is Required" .Values.global.keycloak.clientSecret }}'
        - name: OAUTH2_PROXY_COOKIE_SECRET
          value: '{{ default (randAlpha 32 | lower | b64enc) .Values.global.keycloak.cookieSecret }}'
        - name: OAUTH2_PROXY_OIDC_ISSUER_URL
          value: '{{ required "Keycloak Issuer URL is Required" .Values.global.keycloak.issuerUrl }}'
        - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
          value: 'true'
      ports:
        - name: oauth2-proxy
          containerPort: 4180
          protocol: TCP
      imagePullPolicy: IfNotPresent
      image: 'quay.io/oauth2-proxy/oauth2-proxy:latest'
      args:
        - '--provider=oidc'
        - '--email-domain=*'
        - '--upstream=http://localhost:7007'
        - '--http-address=:4180'
        - '--skip-provider-button'
        - '--request-logging=true'
        - '--insecure-oidc-allow-unverified-email=true'
  # - name: oauth-proxy 
  #   args:
  #     - -provider=openshift
  #     - -https-address=:8888
  #     - -http-address=:8887
  #     - -email-domain=*
  #     - -upstream=http://localhost:7007
  #     - -tls-cert=/etc/tls/private/tls.crt
  #     - -tls-key=/etc/tls/private/tls.key
  #     - -cookie-secret="{{ default (randAlpha 32 | lower | b64enc) .Values.oauthProxy.cookieSecret }}"
  #     - -openshift-service-account={{ include "common.names.fullname" . }}
  #     - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  #     - -skip-auth-regex=^/metrics
  #     - -skip-provider-button
  #     - -request-logging=true
  #     - -pass-host-header=true
  #     - -pass-access-token=true
    
  #   image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.12
  #   imagePullPolicy: IfNotPresent
  #   ports:
  #     - name: oauth-proxy
  #       containerPort: 8888    
  #       protocol: TCP
  #     - name: oauth-http
  #       containerPort: 8887    
  #       protocol: TCP 
  #   volumeMounts:
  #     - mountPath: /etc/tls/private
  #       name: backstage-tls
  

  # -- Backstage container environment variables
  extraEnvVars:
    - name: LOG_LEVEL
      value: 'debug'
    # - name: "APP_CONFIG_app_baseUrl"
    #   value: 'https://{{ include "backstage.fullname" . }}.{{ .Values.base_domain }}'
    # - name: "APP_CONFIG_backend_baseUrl"
    #   value: 'https://{{ include "backstage.fullname" . }}.{{ .Values.base_domain }}'
    # - name: "APP_CONFIG_backend_cors_origin"
    #   value: 'https://{{ include "backstage.fullname" . }}.{{ .Values.base_domain }}'
    # - name: "APP_CONFIG_backend_database_client"
    #   value: pg
    # - name: "APP_CONFIG_backend_database_connection_host"
    #   value: "{{ include \"backstage.postgresql.host\" . }}"
    # - name: "APP_CONFIG_backend_database_connection_port"
    #   value: '5432'
    # Since we are running two clusters in the workshop, each with user{1..45} we need to add the guid
    # so users won't step on each other's feet in GitHub
    - name: "CLUSTERGUID"
      value: "{{ .Values.cluster_guid }}"
    - name: "APP_CONFIG_backend_database_connection_user"
      value: "{{ .Values.postgresql.auth.username }}"
    - name: "APP_CONFIG_backend_database_connection_password"
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: "{{ include \"backstage.postgresql.fullname\" . }}"
  # -- Backstage container environment variables from Secrets
  extraEnvVarsSecrets: []

  # -- Backstage container additional volume mounts
  extraVolumeMounts:
      # - mountPath: /tmp/fakepath
      #   name: backstage-tls

  # -- Backstage container additional volumes
  extraVolumes:
    # - name: backstage-tls
    #   secret:
    #     defaultMode: 420
    #     secretName: backstage-tls


  # -- Backstage container init containers
  initContainers: []






  # -- Directory containing the backstage installation
  installDir: /opt/app-root/src

  # -- Resource requests/limits
  # <br /> Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  # <!-- E.g.
  # resources:
  #   limits:
  #     memory: 1Gi
  #     cpu: 1000m
  #   requests:
  #     memory: 250Mi
  #     cpu: 100m -->
  resources: {}

  # -- Security settings for a Pod.
  #  The security settings that you specify for a Pod apply to all Containers in the Pod.
  # <br /> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  podSecurityContext: {}

  # -- Security settings for a Container.
  # <br /> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  containerSecurityContext: {}

  # Allows to define the appConfig as a multiline string that generates a ConfigMap
  # automatically, not requiring to have it pre provisioned as with the extraAppConfig key.
  # DO NOT USE if you need to put sensitive data in the appConfig.
  # E.g:
  # appConfig:
  #   app:
  #     baseUrl: https://somedomain.tld
  # -- Generates ConfigMap and configures it in the Backstage pods
  appConfig: |
    app:
      title: Globex Backstage
      baseUrl: https://{{ include "backstage.fullname" . }}.{{ .Values.base_domain }}

    organization:
      name: Globex 

    auth:
      providers:
        oauth2Proxy: {}

    integrations:
      github:
        - host: github.com
          

    proxy:
      '/user-avatars':
        target: https://api.dicebear.com/6.x/open-peeps
        allowedMethods: ['GET']
        

    # scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options
    


    catalog:
      rules:
        - allow: [Component, System, API, Resource, Location]
      locations:

        # # Uncomment these lines to add more example data
        # - type: url
        #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

        # # Uncomment these lines to add an example org
        # - type: url
        #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
        #   rules:
        #     - allow: [User, Group]

        - type: url
          target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/springboot-grpc-template/template.yaml
          rules:
            - allow: [Template]



        # Globex / Demo templates
        - type: url
          target: https://github.com/rh-cloud-arch-workshops-entities/globex-templates/blob/main/all-modules.yaml
          rules:
            - allow: [Template]

        # Globex / Demo org structure
        - type: url
          target: https://github.com/rh-cloud-arch-workshops-entities/globex-org/blob/main/users-and-groups.yaml
          rules:
            - allow: [User, Group]

    backend:
      baseUrl: https://{{ include "backstage.fullname" . }}.{{ .Values.base_domain }}
      listen:
        port: 7007
      
        
      csp:
        connect-src: ["'self'", 'http:', 'https:']
        # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
        # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      cors:
        origin: https://{{ include "backstage.fullname" . }}.{{ .Values.base_domain }}
        methods: [GET, POST, PUT, DELETE]
        credentials: true
      
     # config options: https://node-postgres.com/api/client
      database:
        client: pg
        connection:
          host: {{ include "backstage.postgresql.host" . }}
          port: 5432
          user: postgres
          password: changeit
          # https://node-postgres.com/features/ssl
          # ssl: 
          # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
          #   ca: 
          #     $file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
           
      cache:
        store: memory
      # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

    
    # Reference documentation http://backstage.io/docs/features/techdocs/configuration
    # Note: After experimenting with basic setup, use CI/CD to generate docs
    # and an external cloud storage when deploying TechDocs for production use-case.
    # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'local' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
    # ---------temporary, to make the schema happy, need to be removed alongside unused plugins
    # ------ the first try resulted in numerous 'tsc' errors, so will need to set aside some time
    # ------ for now, they will remain enabled with example data, but excluded from the frontend
    #---------------------

    costInsights:
      engineerCost: 200000
      engineerThreshold: 0.5
      products:
        computeEngine:
          name: Compute Engine
          icon: compute
        cloudDataflow:
          name: Cloud Dataflow
          icon: data
        cloudStorage:
          name: Cloud Storage
          icon: storage
        bigQuery:
          name: BigQuery
          icon: search
        events:
          name: Events
          icon: data
      metrics:
        DAU:
          name: Daily Active Users
          default: true
        MSC:
          name: Monthly Subscribers
      currencies:
        engineers:
          label: 'Engineers 🛠'
          unit: 'engineer'
        usd:
          label: 'US Dollars 💵'
          kind: 'USD'
          unit: 'dollar'
          prefix: '$'
          rate: 1
        carbonOffsetTons:
          label: 'Carbon Offset Tons ♻️⚖️s'
          kind: 'CARBON_OFFSET_TONS'
          unit: 'carbon offset ton'
          rate: 3.5
        beers:
          label: 'Beers 🍺'
          kind: 'BEERS'
          unit: 'beer'
          rate: 4.5
        pintsIceCream:
          label: 'Pints of Ice Cream 🍦'
          kind: 'PINTS_OF_ICE_CREAM'
          unit: 'ice cream pint'
          rate: 5.5
    pagerduty:
      eventsBaseUrl: 'https://events.pagerduty.com/v2'
    jenkins:
      instances:
        - name: default
          baseUrl: https://jenkins.example.com
          username: backstage-bot
          apiKey: 123456789abcdef0123456789abcedf012

    azureDevOps:
      host: dev.azure.com
      token: my-token
      organization: my-company

    apacheAirflow:
      baseUrl: https://your.airflow.instance.com

    gocd:
      baseUrl: https://your.gocd.instance.com

    stackstorm:
      webUrl: https://your.stackstorm.webui.instance.com

    sentry:
      organization: my-company

    rollbar:
      organization: my-company
      # NOTE: The rollbar-backend & accountToken key may be deprecated in the future (replaced by a proxy config)
      accountToken: my-rollbar-account-token

    lighthouse:
      baseUrl: http://localhost:3003

    # Score-cards sample configuration.
    scorecards:
      jsonDataUrl: https://raw.githubusercontent.com/Oriflame/backstage-plugins/main/plugins/score-card/sample-data/
      wikiLinkTemplate: https://link-to-wiki/{id}

    kafka:
      clientId: backstage
      clusters:
        - name: cluster
          dashboardUrl: https://akhq.io/
          brokers:
            - localhost:9092
            
    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - type: 'config'
          clusters: []






  # -- Node labels for pod assignment
  # <br /> Ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # -- Node tolerations for server scheduling to nodes with taints
  # <br /> Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations: []
  #  - key: "key"
  #    operator: "Equal|Exists"
  #    value: "value"
  #    effect: "NoSchedule|PreferNoSchedule|NoExecute"

  # -- Annotations to add to the backend deployment pods
  podAnnotations: {}

  # -- Additional custom annotations for the `Deployment` resource
  annotations: {}

# -- Route re-encrytion used with OpenShift OAuth Proxy
# Ref: https://janus-idp.io/blog/using-openshift-authentication-to-secure-access-to-backstage#ingress-configuration
ingress:
  enabled: true
  host: '{{ include "backstage.fullname" . }}.{{ .Values.base_domain }}'
  annotations:
    route.openshift.io/termination: "edge"
    
  # -- Ingress TLS parameters
  tls:

    # -- Enable TLS configuration for the host defined at `ingress.host` parameter
    enabled: false

    # -- The name to which the TLS Secret will be called
    secretName: ""

service:

  # -- Kubernetes Service type
  type: ClusterIP

  # -- Backstage svc port for client connections
  ports:
    backend: 4180
    #backend: 8888
    #backend: 7007

    # -- Backstage svc port name
    #name: http-backend

    # -- Backstage svc target port referencing receiving pod container port
    targetPort: 4180


  # -- Node port for the Backstage client connections
  # Choose port between `30000-32767`
  nodePorts:
    backend: ""

  # -- Control where client requests go, to the same pod or round-robin
  # (values: `ClientIP` or `None`)
  # <br /> Ref: https://kubernetes.io/docs/user-guide/services/
  sessionAffinity: None

  # -- Backstage service Cluster IP
  #
  # <br /> E.g `clusterIP: None`
  clusterIP: ""

  # -- Backstage service Load Balancer IP
  #
  # <br /> Ref: https://kubernetes.io/docs/user-guide/services/#type-loadbalancer
  loadBalancerIP: ""

  # -- Load Balancer sources
  #
  # <br /> Ref: https://kubernetes.io/docs/tasks/access-application-cluster/cnfigure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  # <br /> E.g `loadBalancerSourceRanges: [10.10.10.0/24]`
  loadBalancerSourceRanges: []

  # -- Backstage service external traffic policy
  #
  # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  externalTrafficPolicy: Cluster

  # -- Additional custom annotations for Backstage service
  # -- Used for OPenShift OAuth Proxy Sidecar
  # Ref: https://janus-idp.io/blog/using-openshift-authentication-to-secure-access-to-backstage#tls-certificate-management
  annotations: 
    # service.alpha.openshift.io/serving-cert-secret-name: backstage-tls
  
  # -- Extra ports to expose in the Backstage service (normally used with the `sidecar` value)
  extraPorts: []

# -- Network policies
# <br /> Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:

  # -- networkPolicy.enabled Specifies whether a NetworkPolicy should be created
  enabled: false

  externalAccess:
    from: []

  # -- Custom network policy rule
  egressRules:

    # -- Additional custom egress rules
    # e.g:
    # customRules:
    #   - to:
    #       - namespaceSelector:
    #           matchLabels:
    #             label: example
    customRules: []


# -- PostgreSQL [chart configuration](https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml)
postgresql:
  enabled: true
  database: backstage
  postgresqlDataDir: /var/lib/pgsql/data/userdata
  auth:
    username: postgres
    database: backstage
  image:
    registry: registry.redhat.io
    repository: rhel9/postgresql-13
    tag: 1-73
  primary:
    securityContext:
      enabled: false
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    persistence:
      enabled: true
      mountPath: /var/lib/pgsql/data
    extraEnvVars:
    - name: POSTGRESQL_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: backstage-postgresql  
# -- PostgreSQL architecture (`standalone` or `replication`)
  architecture: standalone
  # -- Service Account Configuration
# @default -- See below
serviceAccount:
 
  # -- Enable the creation of a ServiceAccount for Backstage pods
  create: true

  # -- Name of the ServiceAccount to use
  # If not set and `serviceAccount.create` is true, a name is generated
  name: ""

  # -- Additional custom labels to the service ServiceAccount.
  labels: {}

  # -- Additional custom annotations for the ServiceAccount.
  # -- Used for the Oauth Client Callback
  # Ref: https://janus-idp.io/blog/using-openshift-authentication-to-secure-access-to-backstage#oauth-client-configuration
  annotations: 
    # serviceaccounts.openshift.io/oauth-redirecturi.backstage: 'https://{{ include "backstage.fullname" . }}.{{ .Values.base_domain }}/oauth/callback'

  # -- Auto-mount the service account token in the pod
  automountServiceAccountToken: true

# -- Metrics configuration
metrics:

  # -- ServiceMonitor configuration
  # <br /> Allows configuring your backstage instance as a scrape target for [Prometheus](https://github.com/prometheus/prometheus) using a ServiceMonitor custom resource that [Prometheus Operator](https://github.com/prometheus-operator/prometheus-operator) can understand.
  serviceMonitor:

    # -- If enabled, a ServiceMonitor resource for Prometheus Operator is created
    # <br /> Prometheus Operator must be installed in your cluster prior to enabling.
    enabled: false

    # -- ServiceMonitor annotations
    annotations: {}

    # -- Additional ServiceMonitor labels
    labels: {}

    # -- ServiceMonitor scrape interval
    interval: null

    # -- ServiceMonitor endpoint path
    # <br /> Note that the /metrics endpoint is NOT present in a freshly scaffolded Backstage app. To setup, follow the [Prometheus metrics tutorial](https://github.com/backstage/backstage/blob/master/contrib/docs/tutorials/prometheus-metrics.md).
    path: /metrics

oauthProxy:
  cookieSecret: "1234567890123456789012"

base_domain: apps.cluster-p4967.p4967.sandbox1308.opentlc.com
cluster_guid: p4967
usePostgresql: true

global:
  keycloak:
    issuerUrl: 'https://sso.apps.cluster-p4967.p4967.sandbox1308.opentlc.com/auth/realms/backstage'
    clientId: 'backstage'
    clientSecret: 'NmNplwgNLJjtiDTweYPCKoVlfe3IEvm8'
    cookieSecret: ''
